syntax = "proto3";

package dozer.ingest;

service IngestService {
  rpc ingest(IngestRequest) returns (IngestResponse);

  rpc ingest_arrow(IngestArrowRequest) returns (IngestResponse);
}

// The event types.
enum OperationType {
  INSERT = 0; // INSERT operation.
  DELETE = 1; // DELETE operation.
  UPDATE = 2; // UPDATE operation.
}

message IngestRequest {
  string schema_name = 1;
  // The operation type.
  OperationType typ = 2;
  // Old record data, only applicable for UPDATE type.
  repeated Value old = 3;
  // New record data.
  repeated Value new = 4;

  uint32 seq_no = 5;
}
message IngestResponse { uint32 seq_no = 1; }

message PointType {
  double x = 1;
  double y = 2;
}

message DurationType {
  string value = 1;      // up to u128
  string time_unit = 2;  // nanoseconds by default
}

// rust-decimal as a message
message RustDecimal {
  // the lo, mid, hi, and flags fields contain the representation of the Decimal
  // value as a 96-bit integer
  uint32 scale = 1;
  uint32 lo = 2;
  uint32 mid = 3;
  uint32 hi = 4;
  bool negative = 5;
}

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}

// A field value.
message Value {
  // A field value.
  oneof value {
    uint64 uint_value = 1;      // Unsigned 64 bit integer.
    string uint_128_value = 2;  // Unsigned 128 bit integer.
    int64 int_value = 3;        // Signed 64 bit integer.
    string int_128_value = 4;   // Signed 128 bit integer.
    double float_value = 5;     // 64 bit floating point number.
    bool bool_value = 6;        // Boolean.
    string string_value = 7;    // UTF-8 string.
    bytes bytes_value = 8;      // Binary data.
    RustDecimal decimal_value = 9;                  // Decimal value.
    Timestamp timestamp_value = 10; // DateTime & Timestamp.
    string date_value = 11;                 // ISO 8601 calendar date without timezone.
    PointType point_value = 12;             // Point type.
    DurationType duration_value = 13;       // Duration type.
    JsonValue json_value = 14;  // JSON type.
  };
}

message IngestArrowRequest {
  string schema_name = 1;

  // Old record data, only applicable for UPDATE type.
  bytes records = 2;

  uint32 seq_no = 3;

  map<uint32, IngestMetadata> metadata = 4;
}

message IngestMetadata {

  // The operation type.
  OperationType typ = 1;

  // Records with same primary key will have increasing version.
  uint32 version = 2;
}

// `Struct` represents a structured data value, consisting of fields
// which map to dynamically typed values. In some languages, `Struct`
// might be supported by a native representation. For example, in
// scripting languages like JS a struct is represented as an
// object. The details of that representation are described together
// with the proto support for the language.
//
// The JSON representation for `Struct` is JSON object.
message Struct {
  // Unordered map of dynamically typed values.
  map<string, JsonValue> fields = 1;
}

// `Value` represents a dynamically typed value which can be either
// null, a number, a string, a boolean, a recursive struct value, or a
// list of values. A producer of value is expected to set one of these
// variants. Absence of any variant indicates an error.
//
// The JSON representation for `Value` is JSON value.
message JsonValue {
  // The kind of value.
  oneof kind {
    // Represents a null value.
    NullValue null_value = 1;
    // Represents a double value.
    double number_value = 2;
    // Represents a string value.
    string string_value = 3;
    // Represents a boolean value.
    bool bool_value = 4;
    // Represents a structured value.
    Struct struct_value = 5;
    // Represents a repeated `Value`.
    ListValue list_value = 6;
  }
}

// `NullValue` is a singleton enumeration to represent the null value for the
// `Value` type union.
//
// The JSON representation for `NullValue` is JSON `null`.
enum NullValue {
  // Null value.
  NULL_VALUE = 0;
}

// `ListValue` is a wrapper around a repeated field of values.
//
// The JSON representation for `ListValue` is JSON array.
message ListValue {
  // Repeated field of dynamically typed values.
  repeated JsonValue values = 1;
}
